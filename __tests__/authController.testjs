// const request = require('supertest');
// const server = require('../server');  // Adjust the path to your server file
// const mongoose = require('mongoose');
// const User = require('../models/User');

// // Connect to a test database before running tests
// beforeAll(async () => {
//   const url = process.env.MONGO_URI;
//   await mongoose.connect(url, { useNewUrlParser: true, useUnifiedTopology: true });
// });

// // Clean up the test database after each test
// afterEach(async () => {
//   await User.deleteMany({});
// });

// // Close the connection to the test database after all tests are done
// afterAll(async () => {
//   await mongoose.connection.close();
//   await server.close();
// });

// describe('AuthController - User Login and Logout', () => {
//   // Test for successful user login
//   it('should login an existing user with correct credentials', async () => {
//     // Create a user in the test database
//     const user = new User({
//       username: 'testuser',
//       email: 'testuser@example.com',
//       password: await bcrypt.hash('password123', 10),
//       role: 'Customer'
//     });
//     await user.save();

//     // Attempt to login with the correct credentials
//     const res = await request(server)
//       .post('/api/auth/login')
//       .send({
//         email: 'testuser@example.com',
//         password: 'password123'
//       });
    
//     expect(res.statusCode).toBe(200);
//     expect(res.body).toHaveProperty('email', 'testuser@example.com');
//     expect(res.body).toHaveProperty('username', 'testuser');
//   });

//   // Test for failed login due to incorrect password
//   it('should not login a user with incorrect password', async () => {
//     // Create a user in the test database
//     const user = new User({
//       username: 'testuser',
//       email: 'testuser@example.com',
//       password: await bcrypt.hash('password123', 10),
//       role: 'Customer'
//     });
//     await user.save();

//     // Attempt to login with the incorrect password
//     const res = await request(server)
//       .post('/api/auth/login')
//       .send({
//         email: 'testuser@example.com',
//         password: 'wrongpassword'
//       });

//     expect(res.statusCode).toBe(400);
//     expect(res.body).toHaveProperty('msg', 'Invalid Credentials');
//   });

//   // Test for failed login due to non-existent user
//   it('should not login a non-existent user', async () => {
//     // Attempt to login with an email that does not exist
//     const res = await request(server)
//       .post('/api/auth/login')
//       .send({
//         email: 'nonexistent@example.com',
//         password: 'password123'
//       });

//     expect(res.statusCode).toBe(400);
//     expect(res.body).toHaveProperty('msg', 'Invalid Credentials');
//   });

//   // Test for user logout
//   it('should logout a user successfully', async () => {
//     // Create a user and login to establish a session
//     const user = new User({
//       username: 'testuser',
//       email: 'testuser@example.com',
//       password: await bcrypt.hash('password123', 10),
//       role: 'Customer'
//     });
//     await user.save();

//     const agent = request.agent(server);

//     // Log in the user to create a session
//     await agent
//       .post('/api/auth/login')
//       .send({
//         email: 'testuser@example.com',
//         password: 'password123'
//       });

//     // Now attempt to log out
//     const res = await agent.post('/api/auth/logout');

//     expect(res.statusCode).toBe(200);
//     expect(res.body).toHaveProperty('msg', 'Logged out successfully');
//   });
// });
